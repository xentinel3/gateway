server.port=8090
spring.application.name=sc-gateway
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# This enables the route's autoconfiguration using the application name - this enables gateway to read from eureka
#spring.cloud.gateway.discovery.locator.enabled=true
# typically, the application's name is uppercase so, we enable this to make them lowercase
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

## How to make manual routing
spring.cloud.gateway.routes[0].id=account-mgmnt-ms
spring.cloud.gateway.routes[0].uri=lb://account-mgmnt-ms
# Incoming URL path
spring.cloud.gateway.routes[0].predicates[0]=Path=/weirdpath/different/account/estatus
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
#Incoming path routed to an internal valid path
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/weirdpath/different/account/estatus, /account/estatus

#User status check with Authorization and bearer token at headers
spring.cloud.gateway.routes[1].id=users-ms-status
spring.cloud.gateway.routes[1].uri=lb://users-ms
spring.cloud.gateway.routes[1].predicates[0]=Path=/users-ms/users/status/check
spring.cloud.gateway.routes[1].predicates[1]=Method=GET
spring.cloud.gateway.routes[1].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=AuthorizationHeaderFilter
spring.cloud.gateway.routes[1].filters[2]=RewritePath=/users-ms/(?<segment>.*), /$\{segment}

# user sign up route
spring.cloud.gateway.routes[2].id=user-ms-sign-up
spring.cloud.gateway.routes[2].uri=lb://users-ms
spring.cloud.gateway.routes[2].predicates[0]=Path=/users-ms/users
spring.cloud.gateway.routes[2].predicates[1]=Method=Post
spring.cloud.gateway.routes[2].filters[0]=RewritePath=/users-ms/(?<segment>.*), /$\{segment}

# User login route
spring.cloud.gateway.routes[3].id=user-ms-login
spring.cloud.gateway.routes[3].uri=lb://users-ms
spring.cloud.gateway.routes[3].predicates[0]=Path=/users-ms/users/login
spring.cloud.gateway.routes[3].predicates[1]=Method=Post
spring.cloud.gateway.routes[3].filters[0]=RewritePath=/users-ms/(?<segment>.*), /$\{segment}

# User update, delete, read
spring.cloud.gateway.routes[4].id=user-ms-rud
spring.cloud.gateway.routes[4].uri=lb://users-ms
spring.cloud.gateway.routes[4].predicates[0]=Path=/users-ms/users/**
spring.cloud.gateway.routes[4].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[4].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[4].filters[0]=RewritePath=/users-ms/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[4].filters[1]=AuthorizationHeaderFilter


# Enable actuator health and info endpoint
management.endpoint.health.enabled=true
management.endpoint.info.enabled=true
management.endpoints.web.exposure.include=health, info

#Info endpoint
management.info.build.enabled=true
management.info.git.enabled=true
management.info.git.mode=full
management.info.env.enabled=true
management.info.defaults.enabled=true

#Actuator Info
info.application.name=Gateway Spring Cloud Microservice
info.application.description=A microservice to enable the spring cloud architecture
info.application.author.name= Julio Cesar

# Security

api.signup.url.path = /users-ms/users
api.login.url.path = /users-ms/users/login
api.h2console.url.path = /users-ms/h2-console

authorization.token.header.name =Authorization
authorization.token.header.prefix =Bearer
token.secret = Sx633NtVdKPntgVEBJ3KAnywqKLmeh

